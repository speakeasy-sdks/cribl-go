// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"cribl/pkg/models/shared"
	"net/http"
)

type GetEventsRequest struct {
	// Optional parameter, when provided the files and provided offsets are used to look for events.
	Files *string `queryParam:"style=form,explode=true,name=Files"`
	// Epoch timestamp of the earliest event (includes rolled files present on disk)
	Et *int64 `queryParam:"style=form,explode=true,name=et"`
	// Filter
	Filter *string `queryParam:"style=form,explode=true,name=filter"`
	// Maximum number of log lines to retrieve starting from offset.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Epoch timestamp of the latest event (includes rolled files present on disk)
	Lt *int64 `queryParam:"style=form,explode=true,name=lt"`
	// The type of source events to search in the format {type}/{subtype} i.e system_state/hostsfile, system_state/routes, etc...
	Source *string `queryParam:"style=form,explode=true,name=source"`
}

func (o *GetEventsRequest) GetFiles() *string {
	if o == nil {
		return nil
	}
	return o.Files
}

func (o *GetEventsRequest) GetEt() *int64 {
	if o == nil {
		return nil
	}
	return o.Et
}

func (o *GetEventsRequest) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetEventsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetEventsRequest) GetLt() *int64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetEventsRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

type GetEventsResponse struct {
	ContentType string
	// a list of any objects
	Events      *shared.Events
	StatusCode  int
	RawResponse *http.Response
}

func (o *GetEventsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetEventsResponse) GetEvents() *shared.Events {
	if o == nil {
		return nil
	}
	return o.Events
}

func (o *GetEventsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetEventsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
