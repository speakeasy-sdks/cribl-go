// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"cribl/pkg/models/shared"
	"net/http"
)

type UpgradePackRequest struct {
	// Pack name
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// body boolean optional Only upgrade to minor/patch versions
	Minor *string `queryParam:"style=form,explode=true,name=minor"`
	// body string required Pack source
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// body string optional Specify a branch, tag or a semver spec
	Spec *string `queryParam:"style=form,explode=true,name=spec"`
}

func (o *UpgradePackRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpgradePackRequest) GetMinor() *string {
	if o == nil {
		return nil
	}
	return o.Minor
}

func (o *UpgradePackRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *UpgradePackRequest) GetSpec() *string {
	if o == nil {
		return nil
	}
	return o.Spec
}

type UpgradePackResponse struct {
	ContentType string
	// a list of PackInfo objects
	PackInfos   *shared.PackInfos
	StatusCode  int
	RawResponse *http.Response
}

func (o *UpgradePackResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *UpgradePackResponse) GetPackInfos() *shared.PackInfos {
	if o == nil {
		return nil
	}
	return o.PackInfos
}

func (o *UpgradePackResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *UpgradePackResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
