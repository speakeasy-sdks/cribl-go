// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputStatusStatusHealth string

const (
	InputStatusStatusHealthGreen  InputStatusStatusHealth = "Green"
	InputStatusStatusHealthYellow InputStatusStatusHealth = "Yellow"
	InputStatusStatusHealthRed    InputStatusStatusHealth = "Red"
)

func (e InputStatusStatusHealth) ToPointer() *InputStatusStatusHealth {
	return &e
}

func (e *InputStatusStatusHealth) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Green":
		fallthrough
	case "Yellow":
		fallthrough
	case "Red":
		*e = InputStatusStatusHealth(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputStatusStatusHealth: %v", v)
	}
}

type InputStatusStatus struct {
	Health    InputStatusStatusHealth `json:"health"`
	Metrics   map[string]interface{}  `json:"metrics"`
	Timestamp int64                   `json:"timestamp"`
}

func (o *InputStatusStatus) GetHealth() InputStatusStatusHealth {
	if o == nil {
		return InputStatusStatusHealth("")
	}
	return o.Health
}

func (o *InputStatusStatus) GetMetrics() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Metrics
}

func (o *InputStatusStatus) GetTimestamp() int64 {
	if o == nil {
		return 0
	}
	return o.Timestamp
}

type InputStatus struct {
	ID     string            `json:"id"`
	Status InputStatusStatus `json:"status"`
}

func (o *InputStatus) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *InputStatus) GetStatus() InputStatusStatus {
	if o == nil {
		return InputStatusStatus{}
	}
	return o.Status
}
