// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ContainerType string

const (
	ContainerTypeDocker     ContainerType = "docker"
	ContainerTypeContainerd ContainerType = "containerd"
)

func (e ContainerType) ToPointer() *ContainerType {
	return &e
}

func (e *ContainerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "docker":
		fallthrough
	case "containerd":
		*e = ContainerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ContainerType: %v", v)
	}
}

type Container struct {
	Containerd *ContainerdInfo `json:"containerd,omitempty"`
	Created    int64           `json:"created"`
	Docker     *DockerInfo     `json:"docker,omitempty"`
	ID         string          `json:"id"`
	Image      string          `json:"image"`
	Ips        []string        `json:"ips,omitempty"`
	Name       string          `json:"name"`
	Ports      []ContainerPort `json:"ports,omitempty"`
	Status     string          `json:"status"`
	Type       ContainerType   `json:"type"`
}

func (o *Container) GetContainerd() *ContainerdInfo {
	if o == nil {
		return nil
	}
	return o.Containerd
}

func (o *Container) GetCreated() int64 {
	if o == nil {
		return 0
	}
	return o.Created
}

func (o *Container) GetDocker() *DockerInfo {
	if o == nil {
		return nil
	}
	return o.Docker
}

func (o *Container) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Container) GetImage() string {
	if o == nil {
		return ""
	}
	return o.Image
}

func (o *Container) GetIps() []string {
	if o == nil {
		return nil
	}
	return o.Ips
}

func (o *Container) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Container) GetPorts() []ContainerPort {
	if o == nil {
		return nil
	}
	return o.Ports
}

func (o *Container) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Container) GetType() ContainerType {
	if o == nil {
		return ContainerType("")
	}
	return o.Type
}
