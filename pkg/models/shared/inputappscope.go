// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputAppscopeAuthenticationMethod - Enter a token directly, or provide a secret referencing a token
type InputAppscopeAuthenticationMethod string

const (
	InputAppscopeAuthenticationMethodSecret InputAppscopeAuthenticationMethod = "secret"
	InputAppscopeAuthenticationMethodManual InputAppscopeAuthenticationMethod = "manual"
)

func (e InputAppscopeAuthenticationMethod) ToPointer() *InputAppscopeAuthenticationMethod {
	return &e
}

func (e *InputAppscopeAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputAppscopeAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopeAuthenticationMethod: %v", v)
	}
}

type InputAppscopeConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

func (o *InputAppscopeConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

func (o *InputAppscopeConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

type InputAppscopeFilterAllow2 struct {
	// Specify a string to substring-match against process command-line.
	Arg string `json:"arg"`
	// Choose a config to apply to processes that match the process name and/or argument.
	Config string `json:"config"`
	// Specify the name of a process or family of processes.
	Procname *string `json:"procname,omitempty"`
}

func (o *InputAppscopeFilterAllow2) GetArg() string {
	if o == nil {
		return ""
	}
	return o.Arg
}

func (o *InputAppscopeFilterAllow2) GetConfig() string {
	if o == nil {
		return ""
	}
	return o.Config
}

func (o *InputAppscopeFilterAllow2) GetProcname() *string {
	if o == nil {
		return nil
	}
	return o.Procname
}

type InputAppscopeFilterAllow1 struct {
	// Specify a string to substring-match against process command-line.
	Arg *string `json:"arg,omitempty"`
	// Choose a config to apply to processes that match the process name and/or argument.
	Config string `json:"config"`
	// Specify the name of a process or family of processes.
	Procname string `json:"procname"`
}

func (o *InputAppscopeFilterAllow1) GetArg() *string {
	if o == nil {
		return nil
	}
	return o.Arg
}

func (o *InputAppscopeFilterAllow1) GetConfig() string {
	if o == nil {
		return ""
	}
	return o.Config
}

func (o *InputAppscopeFilterAllow1) GetProcname() string {
	if o == nil {
		return ""
	}
	return o.Procname
}

type InputAppscopeFilterDeny2 struct {
	// Specify a string to substring-match against process command-line.
	Arg string `json:"arg"`
	// Specify the name of a process or family of processes.
	Procname *string `json:"procname,omitempty"`
}

func (o *InputAppscopeFilterDeny2) GetArg() string {
	if o == nil {
		return ""
	}
	return o.Arg
}

func (o *InputAppscopeFilterDeny2) GetProcname() *string {
	if o == nil {
		return nil
	}
	return o.Procname
}

type InputAppscopeFilterDeny1 struct {
	// Specify a string to substring-match against process command-line.
	Arg *string `json:"arg,omitempty"`
	// Specify the name of a process or family of processes.
	Procname string `json:"procname"`
}

func (o *InputAppscopeFilterDeny1) GetArg() *string {
	if o == nil {
		return nil
	}
	return o.Arg
}

func (o *InputAppscopeFilterDeny1) GetProcname() string {
	if o == nil {
		return ""
	}
	return o.Procname
}

type InputAppscopeFilter struct {
	// Specify processes that AppScope SHOULD be loaded into, and the config to use.
	Allow []interface{} `json:"allow,omitempty"`
	// Specify processes that AppScope SHOULD NOT be loaded into.
	Deny []interface{} `json:"deny,omitempty"`
	// Toggle to Yes to specify processes to scope and configs to apply.
	Enable *bool `json:"enable,omitempty"`
	// To override the UNIX domain socket or address/port specified in General Settings (while leaving Authentication settings as is), enter a URL.
	TransportURL *string `json:"transportURL,omitempty"`
}

func (o *InputAppscopeFilter) GetAllow() []interface{} {
	if o == nil {
		return nil
	}
	return o.Allow
}

func (o *InputAppscopeFilter) GetDeny() []interface{} {
	if o == nil {
		return nil
	}
	return o.Deny
}

func (o *InputAppscopeFilter) GetEnable() *bool {
	if o == nil {
		return nil
	}
	return o.Enable
}

func (o *InputAppscopeFilter) GetTransportURL() *string {
	if o == nil {
		return nil
	}
	return o.TransportURL
}

type InputAppscopeMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputAppscopeMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputAppscopeMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type InputAppscopeOptionalFieldsInGeneralSection string

const (
	InputAppscopeOptionalFieldsInGeneralSectionEnableUnixPath InputAppscopeOptionalFieldsInGeneralSection = "enableUnixPath"
)

func (e InputAppscopeOptionalFieldsInGeneralSection) ToPointer() *InputAppscopeOptionalFieldsInGeneralSection {
	return &e
}

func (e *InputAppscopeOptionalFieldsInGeneralSection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enableUnixPath":
		*e = InputAppscopeOptionalFieldsInGeneralSection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopeOptionalFieldsInGeneralSection: %v", v)
	}
}

// InputAppscopePersistenceCompression - Select data compression format. Optional.
type InputAppscopePersistenceCompression string

const (
	InputAppscopePersistenceCompressionNone InputAppscopePersistenceCompression = "none"
	InputAppscopePersistenceCompressionGzip InputAppscopePersistenceCompression = "gzip"
)

func (e InputAppscopePersistenceCompression) ToPointer() *InputAppscopePersistenceCompression {
	return &e
}

func (e *InputAppscopePersistenceCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputAppscopePersistenceCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopePersistenceCompression: %v", v)
	}
}

type InputAppscopePersistence struct {
	// Select data compression format. Optional.
	Compress *InputAppscopePersistenceCompression `json:"compress,omitempty"`
	// Path to use to write metrics. Defaults to $CRIBL_HOME/state/appscope
	DestPath *string `json:"destPath,omitempty"`
	// Spool events and metrics on disk for Cribl Edge and Search
	Enable *bool `json:"enable,omitempty"`
	// Maximum disk space allowed to be consumed (e.g., 420MB or 4GB). Once reached, older data will be deleted.
	MaxDataSize *string `json:"maxDataSize,omitempty"`
	// Maximum amount of time to retain data (e.g., 2h or 4d). Once reached, older data will be deleted.
	MaxDataTime *string `json:"maxDataTime,omitempty"`
	// Time span for each file bucket
	TimeWindow *string `json:"timeWindow,omitempty"`
}

func (o *InputAppscopePersistence) GetCompress() *InputAppscopePersistenceCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *InputAppscopePersistence) GetDestPath() *string {
	if o == nil {
		return nil
	}
	return o.DestPath
}

func (o *InputAppscopePersistence) GetEnable() *bool {
	if o == nil {
		return nil
	}
	return o.Enable
}

func (o *InputAppscopePersistence) GetMaxDataSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataSize
}

func (o *InputAppscopePersistence) GetMaxDataTime() *string {
	if o == nil {
		return nil
	}
	return o.MaxDataTime
}

func (o *InputAppscopePersistence) GetTimeWindow() *string {
	if o == nil {
		return nil
	}
	return o.TimeWindow
}

// InputAppscopePqCompression - Codec to use to compress the persisted data.
type InputAppscopePqCompression string

const (
	InputAppscopePqCompressionNone InputAppscopePqCompression = "none"
	InputAppscopePqCompressionGzip InputAppscopePqCompression = "gzip"
)

func (e InputAppscopePqCompression) ToPointer() *InputAppscopePqCompression {
	return &e
}

func (e *InputAppscopePqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputAppscopePqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopePqCompression: %v", v)
	}
}

// InputAppscopePqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputAppscopePqMode string

const (
	InputAppscopePqModeSmart  InputAppscopePqMode = "smart"
	InputAppscopePqModeAlways InputAppscopePqMode = "always"
)

func (e InputAppscopePqMode) ToPointer() *InputAppscopePqMode {
	return &e
}

func (e *InputAppscopePqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputAppscopePqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopePqMode: %v", v)
	}
}

type InputAppscopePq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputAppscopePqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputAppscopePqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

func (o *InputAppscopePq) GetCommitFrequency() *int64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputAppscopePq) GetCompress() *InputAppscopePqCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *InputAppscopePq) GetMaxBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputAppscopePq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputAppscopePq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputAppscopePq) GetMode() *InputAppscopePqMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputAppscopePq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// InputAppscopeTLSSettingsServerSideMaximumTLSVersion - Maximum TLS version to accept from connections.
type InputAppscopeTLSSettingsServerSideMaximumTLSVersion string

const (
	InputAppscopeTLSSettingsServerSideMaximumTLSVersionTlSv1  InputAppscopeTLSSettingsServerSideMaximumTLSVersion = "TLSv1"
	InputAppscopeTLSSettingsServerSideMaximumTLSVersionTlSv11 InputAppscopeTLSSettingsServerSideMaximumTLSVersion = "TLSv1.1"
	InputAppscopeTLSSettingsServerSideMaximumTLSVersionTlSv12 InputAppscopeTLSSettingsServerSideMaximumTLSVersion = "TLSv1.2"
	InputAppscopeTLSSettingsServerSideMaximumTLSVersionTlSv13 InputAppscopeTLSSettingsServerSideMaximumTLSVersion = "TLSv1.3"
)

func (e InputAppscopeTLSSettingsServerSideMaximumTLSVersion) ToPointer() *InputAppscopeTLSSettingsServerSideMaximumTLSVersion {
	return &e
}

func (e *InputAppscopeTLSSettingsServerSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputAppscopeTLSSettingsServerSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopeTLSSettingsServerSideMaximumTLSVersion: %v", v)
	}
}

// InputAppscopeTLSSettingsServerSideMinimumTLSVersion - Minimum TLS version to accept from connections.
type InputAppscopeTLSSettingsServerSideMinimumTLSVersion string

const (
	InputAppscopeTLSSettingsServerSideMinimumTLSVersionTlSv1  InputAppscopeTLSSettingsServerSideMinimumTLSVersion = "TLSv1"
	InputAppscopeTLSSettingsServerSideMinimumTLSVersionTlSv11 InputAppscopeTLSSettingsServerSideMinimumTLSVersion = "TLSv1.1"
	InputAppscopeTLSSettingsServerSideMinimumTLSVersionTlSv12 InputAppscopeTLSSettingsServerSideMinimumTLSVersion = "TLSv1.2"
	InputAppscopeTLSSettingsServerSideMinimumTLSVersionTlSv13 InputAppscopeTLSSettingsServerSideMinimumTLSVersion = "TLSv1.3"
)

func (e InputAppscopeTLSSettingsServerSideMinimumTLSVersion) ToPointer() *InputAppscopeTLSSettingsServerSideMinimumTLSVersion {
	return &e
}

func (e *InputAppscopeTLSSettingsServerSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputAppscopeTLSSettingsServerSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopeTLSSettingsServerSideMinimumTLSVersion: %v", v)
	}
}

type InputAppscopeTLSSettingsServerSide struct {
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string     `json:"certificateName,omitempty"`
	CommonNameRegex interface{} `json:"commonNameRegex,omitempty"`
	Disabled        *bool       `json:"disabled,omitempty"`
	// Maximum TLS version to accept from connections.
	MaxVersion *InputAppscopeTLSSettingsServerSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to accept from connections.
	MinVersion *InputAppscopeTLSSettingsServerSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath        *string     `json:"privKeyPath,omitempty"`
	RejectUnauthorized interface{} `json:"rejectUnauthorized,omitempty"`
	// Whether to require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert *bool `json:"requestCert,omitempty"`
}

func (o *InputAppscopeTLSSettingsServerSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *InputAppscopeTLSSettingsServerSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *InputAppscopeTLSSettingsServerSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *InputAppscopeTLSSettingsServerSide) GetCommonNameRegex() interface{} {
	if o == nil {
		return nil
	}
	return o.CommonNameRegex
}

func (o *InputAppscopeTLSSettingsServerSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputAppscopeTLSSettingsServerSide) GetMaxVersion() *InputAppscopeTLSSettingsServerSideMaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

func (o *InputAppscopeTLSSettingsServerSide) GetMinVersion() *InputAppscopeTLSSettingsServerSideMinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *InputAppscopeTLSSettingsServerSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *InputAppscopeTLSSettingsServerSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *InputAppscopeTLSSettingsServerSide) GetRejectUnauthorized() interface{} {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputAppscopeTLSSettingsServerSide) GetRequestCert() *bool {
	if o == nil {
		return nil
	}
	return o.RequestCert
}

type InputAppscopeType string

const (
	InputAppscopeTypeAppscope InputAppscopeType = "appscope"
)

func (e InputAppscopeType) ToPointer() *InputAppscopeType {
	return &e
}

func (e *InputAppscopeType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appscope":
		*e = InputAppscopeType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputAppscopeType: %v", v)
	}
}

type InputAppscope struct {
	// Shared secret to be provided by any client (in authToken header field). If empty, unauthed access is permitted.
	AuthToken *string `json:"authToken,omitempty"`
	// Enter a token directly, or provide a secret referencing a token
	AuthType *InputAppscopeAuthenticationMethod `json:"authType,omitempty"`
	// A list of event breaking rulesets that will be applied, in order, to the input data stream.
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputAppscopeConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2.
	EnableProxyHeader *bool `json:"enableProxyHeader,omitempty"`
	// Toggle to Yes to specify a file-backed UNIX domain socket connection, instead of a network host and port.
	EnableUnixPath *bool `json:"enableUnixPath,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string              `json:"environment,omitempty"`
	Filter      *InputAppscopeFilter `json:"filter,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host *string `json:"host,omitempty"`
	// Unique ID for this input
	ID string `json:"id"`
	// Regex matching IP addresses that are allowed to establish a connection.
	IPWhitelistRegex *string `json:"ipWhitelistRegex,omitempty"`
	// Maximum number of active connections allowed per Worker Process, use 0 for unlimited
	MaxActiveCxn *int64 `json:"maxActiveCxn,omitempty"`
	// Fields to add to events from this input.
	Metadata                       []InputAppscopeMetadata                      `json:"metadata,omitempty"`
	OptionalFieldsInGeneralSection *InputAppscopeOptionalFieldsInGeneralSection `json:"optionalFieldsInGeneralSection,omitempty"`
	Persistence                    *InputAppscopePersistence                    `json:"persistence,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// Port to listen on.
	Port *int64           `json:"port,omitempty"`
	Pq   *InputAppscopePq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// The amount of time (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel, before flushing the data stream out, as-is, to the Pipelines.
	StaleChannelFlushMs *int64 `json:"staleChannelFlushMs,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string `json:"streamtags,omitempty"`
	// Select (or create) a stored text secret
	TextSecret *string                             `json:"textSecret,omitempty"`
	TLS        *InputAppscopeTLSSettingsServerSide `json:"tls,omitempty"`
	Type       InputAppscopeType                   `json:"type"`
	// Path to the UNIX domain socket to listen on.
	UnixSocketPath *string `json:"unixSocketPath,omitempty"`
	// Permissions to set for socket e.g., 777. If empty, falls back to the runtime user's default permissions.
	UnixSocketPerms *string `json:"unixSocketPerms,omitempty"`
}

func (o *InputAppscope) GetAuthToken() *string {
	if o == nil {
		return nil
	}
	return o.AuthToken
}

func (o *InputAppscope) GetAuthType() *InputAppscopeAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AuthType
}

func (o *InputAppscope) GetBreakerRulesets() []string {
	if o == nil {
		return nil
	}
	return o.BreakerRulesets
}

func (o *InputAppscope) GetConnections() []InputAppscopeConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputAppscope) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputAppscope) GetEnableProxyHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProxyHeader
}

func (o *InputAppscope) GetEnableUnixPath() *bool {
	if o == nil {
		return nil
	}
	return o.EnableUnixPath
}

func (o *InputAppscope) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputAppscope) GetFilter() *InputAppscopeFilter {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *InputAppscope) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *InputAppscope) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *InputAppscope) GetIPWhitelistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPWhitelistRegex
}

func (o *InputAppscope) GetMaxActiveCxn() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveCxn
}

func (o *InputAppscope) GetMetadata() []InputAppscopeMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputAppscope) GetOptionalFieldsInGeneralSection() *InputAppscopeOptionalFieldsInGeneralSection {
	if o == nil {
		return nil
	}
	return o.OptionalFieldsInGeneralSection
}

func (o *InputAppscope) GetPersistence() *InputAppscopePersistence {
	if o == nil {
		return nil
	}
	return o.Persistence
}

func (o *InputAppscope) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputAppscope) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *InputAppscope) GetPq() *InputAppscopePq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputAppscope) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputAppscope) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputAppscope) GetStaleChannelFlushMs() *int64 {
	if o == nil {
		return nil
	}
	return o.StaleChannelFlushMs
}

func (o *InputAppscope) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputAppscope) GetTextSecret() *string {
	if o == nil {
		return nil
	}
	return o.TextSecret
}

func (o *InputAppscope) GetTLS() *InputAppscopeTLSSettingsServerSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *InputAppscope) GetType() InputAppscopeType {
	if o == nil {
		return InputAppscopeType("")
	}
	return o.Type
}

func (o *InputAppscope) GetUnixSocketPath() *string {
	if o == nil {
		return nil
	}
	return o.UnixSocketPath
}

func (o *InputAppscope) GetUnixSocketPerms() *string {
	if o == nil {
		return nil
	}
	return o.UnixSocketPerms
}
