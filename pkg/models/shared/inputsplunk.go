// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputSplunkAuthTokens struct {
	// Optional token description
	Description *string `json:"description,omitempty"`
	// Shared secrets to be provided by any Splunk forwarder. If empty, unauthed access is permitted.
	Token string `json:"token"`
}

func (o *InputSplunkAuthTokens) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *InputSplunkAuthTokens) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type InputSplunkConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

func (o *InputSplunkConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

func (o *InputSplunkConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

// InputSplunkMaxS2SVersion - The highest S2S protocol version to advertise during handshake.
type InputSplunkMaxS2SVersion string

const (
	InputSplunkMaxS2SVersionV3 InputSplunkMaxS2SVersion = "v3"
	InputSplunkMaxS2SVersionV4 InputSplunkMaxS2SVersion = "v4"
)

func (e InputSplunkMaxS2SVersion) ToPointer() *InputSplunkMaxS2SVersion {
	return &e
}

func (e *InputSplunkMaxS2SVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v3":
		fallthrough
	case "v4":
		*e = InputSplunkMaxS2SVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkMaxS2SVersion: %v", v)
	}
}

type InputSplunkMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputSplunkMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputSplunkMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InputSplunkPqCompression - Codec to use to compress the persisted data.
type InputSplunkPqCompression string

const (
	InputSplunkPqCompressionNone InputSplunkPqCompression = "none"
	InputSplunkPqCompressionGzip InputSplunkPqCompression = "gzip"
)

func (e InputSplunkPqCompression) ToPointer() *InputSplunkPqCompression {
	return &e
}

func (e *InputSplunkPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSplunkPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkPqCompression: %v", v)
	}
}

// InputSplunkPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSplunkPqMode string

const (
	InputSplunkPqModeSmart  InputSplunkPqMode = "smart"
	InputSplunkPqModeAlways InputSplunkPqMode = "always"
)

func (e InputSplunkPqMode) ToPointer() *InputSplunkPqMode {
	return &e
}

func (e *InputSplunkPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputSplunkPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkPqMode: %v", v)
	}
}

type InputSplunkPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputSplunkPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSplunkPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

func (o *InputSplunkPq) GetCommitFrequency() *int64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputSplunkPq) GetCompress() *InputSplunkPqCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *InputSplunkPq) GetMaxBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSplunkPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputSplunkPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputSplunkPq) GetMode() *InputSplunkPqMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputSplunkPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// InputSplunkTLSSettingsServerSideMaximumTLSVersion - Maximum TLS version to accept from connections.
type InputSplunkTLSSettingsServerSideMaximumTLSVersion string

const (
	InputSplunkTLSSettingsServerSideMaximumTLSVersionTlSv1  InputSplunkTLSSettingsServerSideMaximumTLSVersion = "TLSv1"
	InputSplunkTLSSettingsServerSideMaximumTLSVersionTlSv11 InputSplunkTLSSettingsServerSideMaximumTLSVersion = "TLSv1.1"
	InputSplunkTLSSettingsServerSideMaximumTLSVersionTlSv12 InputSplunkTLSSettingsServerSideMaximumTLSVersion = "TLSv1.2"
	InputSplunkTLSSettingsServerSideMaximumTLSVersionTlSv13 InputSplunkTLSSettingsServerSideMaximumTLSVersion = "TLSv1.3"
)

func (e InputSplunkTLSSettingsServerSideMaximumTLSVersion) ToPointer() *InputSplunkTLSSettingsServerSideMaximumTLSVersion {
	return &e
}

func (e *InputSplunkTLSSettingsServerSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputSplunkTLSSettingsServerSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkTLSSettingsServerSideMaximumTLSVersion: %v", v)
	}
}

// InputSplunkTLSSettingsServerSideMinimumTLSVersion - Minimum TLS version to accept from connections.
type InputSplunkTLSSettingsServerSideMinimumTLSVersion string

const (
	InputSplunkTLSSettingsServerSideMinimumTLSVersionTlSv1  InputSplunkTLSSettingsServerSideMinimumTLSVersion = "TLSv1"
	InputSplunkTLSSettingsServerSideMinimumTLSVersionTlSv11 InputSplunkTLSSettingsServerSideMinimumTLSVersion = "TLSv1.1"
	InputSplunkTLSSettingsServerSideMinimumTLSVersionTlSv12 InputSplunkTLSSettingsServerSideMinimumTLSVersion = "TLSv1.2"
	InputSplunkTLSSettingsServerSideMinimumTLSVersionTlSv13 InputSplunkTLSSettingsServerSideMinimumTLSVersion = "TLSv1.3"
)

func (e InputSplunkTLSSettingsServerSideMinimumTLSVersion) ToPointer() *InputSplunkTLSSettingsServerSideMinimumTLSVersion {
	return &e
}

func (e *InputSplunkTLSSettingsServerSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputSplunkTLSSettingsServerSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkTLSSettingsServerSideMinimumTLSVersion: %v", v)
	}
}

type InputSplunkTLSSettingsServerSide struct {
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string     `json:"certificateName,omitempty"`
	CommonNameRegex interface{} `json:"commonNameRegex,omitempty"`
	Disabled        *bool       `json:"disabled,omitempty"`
	// Maximum TLS version to accept from connections.
	MaxVersion *InputSplunkTLSSettingsServerSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to accept from connections.
	MinVersion *InputSplunkTLSSettingsServerSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath        *string     `json:"privKeyPath,omitempty"`
	RejectUnauthorized interface{} `json:"rejectUnauthorized,omitempty"`
	// Whether to require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert *bool `json:"requestCert,omitempty"`
}

func (o *InputSplunkTLSSettingsServerSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *InputSplunkTLSSettingsServerSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *InputSplunkTLSSettingsServerSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *InputSplunkTLSSettingsServerSide) GetCommonNameRegex() interface{} {
	if o == nil {
		return nil
	}
	return o.CommonNameRegex
}

func (o *InputSplunkTLSSettingsServerSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSplunkTLSSettingsServerSide) GetMaxVersion() *InputSplunkTLSSettingsServerSideMaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

func (o *InputSplunkTLSSettingsServerSide) GetMinVersion() *InputSplunkTLSSettingsServerSideMinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *InputSplunkTLSSettingsServerSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *InputSplunkTLSSettingsServerSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *InputSplunkTLSSettingsServerSide) GetRejectUnauthorized() interface{} {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputSplunkTLSSettingsServerSide) GetRequestCert() *bool {
	if o == nil {
		return nil
	}
	return o.RequestCert
}

type InputSplunkType string

const (
	InputSplunkTypeSplunk InputSplunkType = "splunk"
)

func (e InputSplunkType) ToPointer() *InputSplunkType {
	return &e
}

func (e *InputSplunkType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "splunk":
		*e = InputSplunkType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSplunkType: %v", v)
	}
}

type InputSplunk struct {
	// Shared secrets to be provided by any Splunk forwarder. If empty, unauthed access is permitted.
	AuthTokens []InputSplunkAuthTokens `json:"authTokens,omitempty"`
	// A list of event breaking rulesets that will be applied, in order, to the input data stream.
	BreakerRulesets []string `json:"breakerRulesets,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputSplunkConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2.
	EnableProxyHeader *bool `json:"enableProxyHeader,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host string `json:"host"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// Regex matching IP addresses that are allowed to establish a connection.
	IPWhitelistRegex *string `json:"ipWhitelistRegex,omitempty"`
	// Maximum number of active connections allowed per Worker Process, use 0 for unlimited
	MaxActiveCxn *int64 `json:"maxActiveCxn,omitempty"`
	// The highest S2S protocol version to advertise during handshake.
	MaxS2Sversion *InputSplunkMaxS2SVersion `json:"maxS2Sversion,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputSplunkMetadata `json:"metadata,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// Port to listen on.
	Port int64          `json:"port"`
	Pq   *InputSplunkPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// The amount of time (in milliseconds) the Event Breaker will wait for new data to be sent to a specific channel, before flushing the data stream out, as-is, to the Pipelines.
	StaleChannelFlushMs *int64 `json:"staleChannelFlushMs,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                          `json:"streamtags,omitempty"`
	TLS        *InputSplunkTLSSettingsServerSide `json:"tls,omitempty"`
	Type       *InputSplunkType                  `json:"type,omitempty"`
	// Enables Event Breakers to determine events' time zone from UF-provided metadata, when TZ can't be inferred from the raw event. Toggle to 'No' to disable this fallback.
	UseFwdTimezone *bool `json:"useFwdTimezone,omitempty"`
}

func (o *InputSplunk) GetAuthTokens() []InputSplunkAuthTokens {
	if o == nil {
		return nil
	}
	return o.AuthTokens
}

func (o *InputSplunk) GetBreakerRulesets() []string {
	if o == nil {
		return nil
	}
	return o.BreakerRulesets
}

func (o *InputSplunk) GetConnections() []InputSplunkConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputSplunk) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSplunk) GetEnableProxyHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProxyHeader
}

func (o *InputSplunk) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputSplunk) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *InputSplunk) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputSplunk) GetIPWhitelistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPWhitelistRegex
}

func (o *InputSplunk) GetMaxActiveCxn() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveCxn
}

func (o *InputSplunk) GetMaxS2Sversion() *InputSplunkMaxS2SVersion {
	if o == nil {
		return nil
	}
	return o.MaxS2Sversion
}

func (o *InputSplunk) GetMetadata() []InputSplunkMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputSplunk) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputSplunk) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *InputSplunk) GetPq() *InputSplunkPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputSplunk) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputSplunk) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputSplunk) GetStaleChannelFlushMs() *int64 {
	if o == nil {
		return nil
	}
	return o.StaleChannelFlushMs
}

func (o *InputSplunk) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputSplunk) GetTLS() *InputSplunkTLSSettingsServerSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *InputSplunk) GetType() *InputSplunkType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputSplunk) GetUseFwdTimezone() *bool {
	if o == nil {
		return nil
	}
	return o.UseFwdTimezone
}
