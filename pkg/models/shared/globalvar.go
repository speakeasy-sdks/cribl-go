// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GlobalVarType - Type of variable.
type GlobalVarType string

const (
	GlobalVarTypeString     GlobalVarType = "string"
	GlobalVarTypeNumber     GlobalVarType = "number"
	GlobalVarTypeBoolean    GlobalVarType = "boolean"
	GlobalVarTypeArray      GlobalVarType = "array"
	GlobalVarTypeObject     GlobalVarType = "object"
	GlobalVarTypeExpression GlobalVarType = "expression"
	GlobalVarTypeAny        GlobalVarType = "any"
)

func (e GlobalVarType) ToPointer() *GlobalVarType {
	return &e
}

func (e *GlobalVarType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		fallthrough
	case "number":
		fallthrough
	case "boolean":
		fallthrough
	case "array":
		fallthrough
	case "object":
		fallthrough
	case "expression":
		fallthrough
	case "any":
		*e = GlobalVarType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GlobalVarType: %v", v)
	}
}

// GlobalVar - New Global Variable object
type GlobalVar struct {
	// Brief description of this variable. Optional.
	Description *string `json:"description,omitempty"`
	// Global variable name.
	ID  string  `json:"id"`
	Lib *string `json:"lib,omitempty"`
	// One or more tags related to this variable. Optional.
	Tags *string `json:"tags,omitempty"`
	// Type of variable.
	Type GlobalVarType `json:"type"`
	// Value of variable
	Value string `json:"value"`
}

func (o *GlobalVar) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GlobalVar) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GlobalVar) GetLib() *string {
	if o == nil {
		return nil
	}
	return o.Lib
}

func (o *GlobalVar) GetTags() *string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GlobalVar) GetType() GlobalVarType {
	if o == nil {
		return GlobalVarType("")
	}
	return o.Type
}

func (o *GlobalVar) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}
