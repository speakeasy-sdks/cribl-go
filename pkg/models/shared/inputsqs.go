// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// InputSqsAuthenticationMethod - AWS authentication method. Choose Auto to use IAM roles.
type InputSqsAuthenticationMethod string

const (
	InputSqsAuthenticationMethodSecret InputSqsAuthenticationMethod = "secret"
	InputSqsAuthenticationMethodManual InputSqsAuthenticationMethod = "manual"
)

func (e InputSqsAuthenticationMethod) ToPointer() *InputSqsAuthenticationMethod {
	return &e
}

func (e *InputSqsAuthenticationMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "manual":
		*e = InputSqsAuthenticationMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSqsAuthenticationMethod: %v", v)
	}
}

type InputSqsConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

func (o *InputSqsConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

func (o *InputSqsConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

type InputSqsMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputSqsMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputSqsMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InputSqsPqCompression - Codec to use to compress the persisted data.
type InputSqsPqCompression string

const (
	InputSqsPqCompressionNone InputSqsPqCompression = "none"
	InputSqsPqCompressionGzip InputSqsPqCompression = "gzip"
)

func (e InputSqsPqCompression) ToPointer() *InputSqsPqCompression {
	return &e
}

func (e *InputSqsPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSqsPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSqsPqCompression: %v", v)
	}
}

// InputSqsPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSqsPqMode string

const (
	InputSqsPqModeSmart  InputSqsPqMode = "smart"
	InputSqsPqModeAlways InputSqsPqMode = "always"
)

func (e InputSqsPqMode) ToPointer() *InputSqsPqMode {
	return &e
}

func (e *InputSqsPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputSqsPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSqsPqMode: %v", v)
	}
}

type InputSqsPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputSqsPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSqsPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

func (o *InputSqsPq) GetCommitFrequency() *int64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputSqsPq) GetCompress() *InputSqsPqCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *InputSqsPq) GetMaxBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSqsPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputSqsPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputSqsPq) GetMode() *InputSqsPqMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputSqsPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// InputSqsQueueType - The queue type used (or created). Defaults to Standard
type InputSqsQueueType string

const (
	InputSqsQueueTypeStandard InputSqsQueueType = "standard"
	InputSqsQueueTypeFifo     InputSqsQueueType = "fifo"
)

func (e InputSqsQueueType) ToPointer() *InputSqsQueueType {
	return &e
}

func (e *InputSqsQueueType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "fifo":
		*e = InputSqsQueueType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSqsQueueType: %v", v)
	}
}

// InputSqsRegion - AWS Region where the SQS queue is located. Required, unless the Queue entry is a URL or ARN that includes a Region.
type InputSqsRegion string

const (
	InputSqsRegionUsEast1      InputSqsRegion = "us-east-1"
	InputSqsRegionUsEast2      InputSqsRegion = "us-east-2"
	InputSqsRegionUsWest1      InputSqsRegion = "us-west-1"
	InputSqsRegionUsWest2      InputSqsRegion = "us-west-2"
	InputSqsRegionAfSouth1     InputSqsRegion = "af-south-1"
	InputSqsRegionCaCentral1   InputSqsRegion = "ca-central-1"
	InputSqsRegionEuWest1      InputSqsRegion = "eu-west-1"
	InputSqsRegionEuCentral1   InputSqsRegion = "eu-central-1"
	InputSqsRegionEuWest2      InputSqsRegion = "eu-west-2"
	InputSqsRegionEuSouth1     InputSqsRegion = "eu-south-1"
	InputSqsRegionEuWest3      InputSqsRegion = "eu-west-3"
	InputSqsRegionEuNorth1     InputSqsRegion = "eu-north-1"
	InputSqsRegionApEast1      InputSqsRegion = "ap-east-1"
	InputSqsRegionApNortheast1 InputSqsRegion = "ap-northeast-1"
	InputSqsRegionApNortheast2 InputSqsRegion = "ap-northeast-2"
	InputSqsRegionApSoutheast1 InputSqsRegion = "ap-southeast-1"
	InputSqsRegionApSoutheast2 InputSqsRegion = "ap-southeast-2"
	InputSqsRegionApSouth1     InputSqsRegion = "ap-south-1"
	InputSqsRegionMeSouth1     InputSqsRegion = "me-south-1"
	InputSqsRegionSaEast1      InputSqsRegion = "sa-east-1"
	InputSqsRegionUsGovEast1   InputSqsRegion = "us-gov-east-1"
	InputSqsRegionUsGovWest1   InputSqsRegion = "us-gov-west-1"
)

func (e InputSqsRegion) ToPointer() *InputSqsRegion {
	return &e
}

func (e *InputSqsRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "us-east-1":
		fallthrough
	case "us-east-2":
		fallthrough
	case "us-west-1":
		fallthrough
	case "us-west-2":
		fallthrough
	case "af-south-1":
		fallthrough
	case "ca-central-1":
		fallthrough
	case "eu-west-1":
		fallthrough
	case "eu-central-1":
		fallthrough
	case "eu-west-2":
		fallthrough
	case "eu-south-1":
		fallthrough
	case "eu-west-3":
		fallthrough
	case "eu-north-1":
		fallthrough
	case "ap-east-1":
		fallthrough
	case "ap-northeast-1":
		fallthrough
	case "ap-northeast-2":
		fallthrough
	case "ap-southeast-1":
		fallthrough
	case "ap-southeast-2":
		fallthrough
	case "ap-south-1":
		fallthrough
	case "me-south-1":
		fallthrough
	case "sa-east-1":
		fallthrough
	case "us-gov-east-1":
		fallthrough
	case "us-gov-west-1":
		*e = InputSqsRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSqsRegion: %v", v)
	}
}

// InputSqsSignatureVersion - Signature version to use for signing SQS requests.
type InputSqsSignatureVersion string

const (
	InputSqsSignatureVersionV2 InputSqsSignatureVersion = "v2"
	InputSqsSignatureVersionV4 InputSqsSignatureVersion = "v4"
)

func (e InputSqsSignatureVersion) ToPointer() *InputSqsSignatureVersion {
	return &e
}

func (e *InputSqsSignatureVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		fallthrough
	case "v4":
		*e = InputSqsSignatureVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSqsSignatureVersion: %v", v)
	}
}

type InputSqsType string

const (
	InputSqsTypeSqs InputSqsType = "sqs"
)

func (e InputSqsType) ToPointer() *InputSqsType {
	return &e
}

func (e *InputSqsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sqs":
		*e = InputSqsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSqsType: %v", v)
	}
}

type InputSqs struct {
	// Amazon Resource Name (ARN) of the role to assume
	AssumeRoleArn *string `json:"assumeRoleArn,omitempty"`
	// External ID to use when assuming role
	AssumeRoleExternalID *string `json:"assumeRoleExternalId,omitempty"`
	// SQS queue owner's AWS account ID. Leave empty if SQS queue is in same AWS account.
	AwsAccountID *string `json:"awsAccountId,omitempty"`
	// Access key
	AwsAPIKey *string `json:"awsApiKey,omitempty"`
	// AWS authentication method. Choose Auto to use IAM roles.
	AwsAuthenticationMethod *InputSqsAuthenticationMethod `json:"awsAuthenticationMethod,omitempty"`
	// Select (or create) a stored secret that references your access key and secret key.
	AwsSecret *string `json:"awsSecret,omitempty"`
	// Secret key
	AwsSecretKey *string `json:"awsSecretKey,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputSqsConnections `json:"connections,omitempty"`
	// Create queue if it does not exist.
	CreateQueue *bool `json:"createQueue,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Use Assume Role credentials to access SQS
	EnableAssumeRole *bool `json:"enableAssumeRole,omitempty"`
	// SQS service endpoint. If empty, defaults to AWS' Region-specific endpoint. Otherwise, it must point to SQS-compatible endpoint.
	Endpoint *string `json:"endpoint,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// The maximum number of messages SQS should return in a poll request. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10.
	MaxMessages *int64 `json:"maxMessages,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputSqsMetadata `json:"metadata,omitempty"`
	// The Number of receiver processes to run, the higher the number the better throughput at the expense of CPU overhead
	NumReceivers *int64 `json:"numReceivers,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// The amount of time to wait for events before trying polling again. The lower the number the higher the AWS bill. The higher the number the longer it will take for the source to react to configuration changes and system restarts.
	PollTimeout *int64      `json:"pollTimeout,omitempty"`
	Pq          *InputSqsPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// The name, URL, or ARN of the SQS queue to read events from. When a non-AWS URL is specified, format must be: '{url}/myQueueName'. E.g., 'https://host:port/myQueueName'. Value must be a JavaScript expression (which can evaluate to a constant value), enclosed in quotes or backticks. Can only be evaluated at init time. E.g. referencing a Global Variable: `https://host:port/myQueue-${C.vars.myVar}`.
	QueueName string `json:"queueName"`
	// The queue type used (or created). Defaults to Standard
	QueueType InputSqsQueueType `json:"queueType"`
	// AWS Region where the SQS queue is located. Required, unless the Queue entry is a URL or ARN that includes a Region.
	Region *InputSqsRegion `json:"region,omitempty"`
	// Whether to reject certificates that cannot be verified against a valid CA (e.g., self-signed certificates).
	RejectUnauthorized *bool `json:"rejectUnauthorized,omitempty"`
	// Whether to reuse connections between requests, which can improve performance.
	ReuseConnections *bool `json:"reuseConnections,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Signature version to use for signing SQS requests.
	SignatureVersion *InputSqsSignatureVersion `json:"signatureVersion,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string      `json:"streamtags,omitempty"`
	Type       *InputSqsType `json:"type,omitempty"`
	// After messages are retrieved by a ReceiveMessage request, @{product} will hide them from subsequent retrieve requests for at least this duration. You can set this as high as 43200 sec. (12 hours).
	VisibilityTimeout *int64 `json:"visibilityTimeout,omitempty"`
}

func (o *InputSqs) GetAssumeRoleArn() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleArn
}

func (o *InputSqs) GetAssumeRoleExternalID() *string {
	if o == nil {
		return nil
	}
	return o.AssumeRoleExternalID
}

func (o *InputSqs) GetAwsAccountID() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountID
}

func (o *InputSqs) GetAwsAPIKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsAPIKey
}

func (o *InputSqs) GetAwsAuthenticationMethod() *InputSqsAuthenticationMethod {
	if o == nil {
		return nil
	}
	return o.AwsAuthenticationMethod
}

func (o *InputSqs) GetAwsSecret() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecret
}

func (o *InputSqs) GetAwsSecretKey() *string {
	if o == nil {
		return nil
	}
	return o.AwsSecretKey
}

func (o *InputSqs) GetConnections() []InputSqsConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputSqs) GetCreateQueue() *bool {
	if o == nil {
		return nil
	}
	return o.CreateQueue
}

func (o *InputSqs) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSqs) GetEnableAssumeRole() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAssumeRole
}

func (o *InputSqs) GetEndpoint() *string {
	if o == nil {
		return nil
	}
	return o.Endpoint
}

func (o *InputSqs) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputSqs) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputSqs) GetMaxMessages() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxMessages
}

func (o *InputSqs) GetMetadata() []InputSqsMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputSqs) GetNumReceivers() *int64 {
	if o == nil {
		return nil
	}
	return o.NumReceivers
}

func (o *InputSqs) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputSqs) GetPollTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.PollTimeout
}

func (o *InputSqs) GetPq() *InputSqsPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputSqs) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputSqs) GetQueueName() string {
	if o == nil {
		return ""
	}
	return o.QueueName
}

func (o *InputSqs) GetQueueType() InputSqsQueueType {
	if o == nil {
		return InputSqsQueueType("")
	}
	return o.QueueType
}

func (o *InputSqs) GetRegion() *InputSqsRegion {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *InputSqs) GetRejectUnauthorized() *bool {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputSqs) GetReuseConnections() *bool {
	if o == nil {
		return nil
	}
	return o.ReuseConnections
}

func (o *InputSqs) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputSqs) GetSignatureVersion() *InputSqsSignatureVersion {
	if o == nil {
		return nil
	}
	return o.SignatureVersion
}

func (o *InputSqs) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputSqs) GetType() *InputSqsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *InputSqs) GetVisibilityTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.VisibilityTimeout
}
