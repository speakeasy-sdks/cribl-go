// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type ExpressionOptions struct {
	AllowInternal             *bool               `json:"allowInternal,omitempty"`
	Args                      []string            `json:"args,omitempty"`
	AstTraverseCallback       *TraverseCallback   `json:"astTraverseCallback,omitempty"`
	Context                   *string             `json:"context,omitempty"`
	DisallowAssign            *bool               `json:"disallowAssign,omitempty"`
	MaxNumOfAllowedIterations *int64              `json:"maxNumOfAllowedIterations,omitempty"`
	PartialEval               *PartialEvalRewrite `json:"partialEval,omitempty"`
	ReplaceIdentifiers        *bool               `json:"replaceIdentifiers,omitempty"`
	ReplaceLiterals           *bool               `json:"replaceLiterals,omitempty"`
	Unprotected               *bool               `json:"unprotected,omitempty"`
}

func (o *ExpressionOptions) GetAllowInternal() *bool {
	if o == nil {
		return nil
	}
	return o.AllowInternal
}

func (o *ExpressionOptions) GetArgs() []string {
	if o == nil {
		return nil
	}
	return o.Args
}

func (o *ExpressionOptions) GetAstTraverseCallback() *TraverseCallback {
	if o == nil {
		return nil
	}
	return o.AstTraverseCallback
}

func (o *ExpressionOptions) GetContext() *string {
	if o == nil {
		return nil
	}
	return o.Context
}

func (o *ExpressionOptions) GetDisallowAssign() *bool {
	if o == nil {
		return nil
	}
	return o.DisallowAssign
}

func (o *ExpressionOptions) GetMaxNumOfAllowedIterations() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxNumOfAllowedIterations
}

func (o *ExpressionOptions) GetPartialEval() *PartialEvalRewrite {
	if o == nil {
		return nil
	}
	return o.PartialEval
}

func (o *ExpressionOptions) GetReplaceIdentifiers() *bool {
	if o == nil {
		return nil
	}
	return o.ReplaceIdentifiers
}

func (o *ExpressionOptions) GetReplaceLiterals() *bool {
	if o == nil {
		return nil
	}
	return o.ReplaceLiterals
}

func (o *ExpressionOptions) GetUnprotected() *bool {
	if o == nil {
		return nil
	}
	return o.Unprotected
}
