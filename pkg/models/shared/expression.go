// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type Expression struct {
	MaxCache                     int64             `json:"MAX_CACHE"`
	Cache                        Map               `json:"cache"`
	DeclaredVariables            []string          `json:"declaredVariables"`
	IsSafe                       bool              `json:"isSafe"`
	ModifiedExpression           string            `json:"modifiedExpression"`
	Opt                          ExpressionOptions `json:"opt"`
	OriginalExpression           string            `json:"originalExpression"`
	PartialExpression            string            `json:"partialExpression"`
	ReferencedCriblExport        bool              `json:"referencedCriblExport"`
	ReplaceIdentifiersExpression string            `json:"replaceIdentifiersExpression"`
	ReplaceLiteralExpression     string            `json:"replaceLiteralExpression"`
}

func (o *Expression) GetMaxCache() int64 {
	if o == nil {
		return 0
	}
	return o.MaxCache
}

func (o *Expression) GetCache() Map {
	if o == nil {
		return Map{}
	}
	return o.Cache
}

func (o *Expression) GetDeclaredVariables() []string {
	if o == nil {
		return []string{}
	}
	return o.DeclaredVariables
}

func (o *Expression) GetIsSafe() bool {
	if o == nil {
		return false
	}
	return o.IsSafe
}

func (o *Expression) GetModifiedExpression() string {
	if o == nil {
		return ""
	}
	return o.ModifiedExpression
}

func (o *Expression) GetOpt() ExpressionOptions {
	if o == nil {
		return ExpressionOptions{}
	}
	return o.Opt
}

func (o *Expression) GetOriginalExpression() string {
	if o == nil {
		return ""
	}
	return o.OriginalExpression
}

func (o *Expression) GetPartialExpression() string {
	if o == nil {
		return ""
	}
	return o.PartialExpression
}

func (o *Expression) GetReferencedCriblExport() bool {
	if o == nil {
		return false
	}
	return o.ReferencedCriblExport
}

func (o *Expression) GetReplaceIdentifiersExpression() string {
	if o == nil {
		return ""
	}
	return o.ReplaceIdentifiersExpression
}

func (o *Expression) GetReplaceLiteralExpression() string {
	if o == nil {
		return ""
	}
	return o.ReplaceLiteralExpression
}
