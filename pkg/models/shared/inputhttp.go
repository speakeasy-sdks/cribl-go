// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputHTTPConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

func (o *InputHTTPConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

func (o *InputHTTPConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

type InputHTTPMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputHTTPMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputHTTPMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InputHTTPPqCompression - Codec to use to compress the persisted data.
type InputHTTPPqCompression string

const (
	InputHTTPPqCompressionNone InputHTTPPqCompression = "none"
	InputHTTPPqCompressionGzip InputHTTPPqCompression = "gzip"
)

func (e InputHTTPPqCompression) ToPointer() *InputHTTPPqCompression {
	return &e
}

func (e *InputHTTPPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputHTTPPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputHTTPPqCompression: %v", v)
	}
}

// InputHTTPPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputHTTPPqMode string

const (
	InputHTTPPqModeSmart  InputHTTPPqMode = "smart"
	InputHTTPPqModeAlways InputHTTPPqMode = "always"
)

func (e InputHTTPPqMode) ToPointer() *InputHTTPPqMode {
	return &e
}

func (e *InputHTTPPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputHTTPPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputHTTPPqMode: %v", v)
	}
}

type InputHTTPPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputHTTPPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputHTTPPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

func (o *InputHTTPPq) GetCommitFrequency() *int64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputHTTPPq) GetCompress() *InputHTTPPqCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *InputHTTPPq) GetMaxBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputHTTPPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputHTTPPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputHTTPPq) GetMode() *InputHTTPPqMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputHTTPPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

// InputHTTPTLSSettingsServerSideMaximumTLSVersion - Maximum TLS version to accept from connections.
type InputHTTPTLSSettingsServerSideMaximumTLSVersion string

const (
	InputHTTPTLSSettingsServerSideMaximumTLSVersionTlSv1  InputHTTPTLSSettingsServerSideMaximumTLSVersion = "TLSv1"
	InputHTTPTLSSettingsServerSideMaximumTLSVersionTlSv11 InputHTTPTLSSettingsServerSideMaximumTLSVersion = "TLSv1.1"
	InputHTTPTLSSettingsServerSideMaximumTLSVersionTlSv12 InputHTTPTLSSettingsServerSideMaximumTLSVersion = "TLSv1.2"
	InputHTTPTLSSettingsServerSideMaximumTLSVersionTlSv13 InputHTTPTLSSettingsServerSideMaximumTLSVersion = "TLSv1.3"
)

func (e InputHTTPTLSSettingsServerSideMaximumTLSVersion) ToPointer() *InputHTTPTLSSettingsServerSideMaximumTLSVersion {
	return &e
}

func (e *InputHTTPTLSSettingsServerSideMaximumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputHTTPTLSSettingsServerSideMaximumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputHTTPTLSSettingsServerSideMaximumTLSVersion: %v", v)
	}
}

// InputHTTPTLSSettingsServerSideMinimumTLSVersion - Minimum TLS version to accept from connections.
type InputHTTPTLSSettingsServerSideMinimumTLSVersion string

const (
	InputHTTPTLSSettingsServerSideMinimumTLSVersionTlSv1  InputHTTPTLSSettingsServerSideMinimumTLSVersion = "TLSv1"
	InputHTTPTLSSettingsServerSideMinimumTLSVersionTlSv11 InputHTTPTLSSettingsServerSideMinimumTLSVersion = "TLSv1.1"
	InputHTTPTLSSettingsServerSideMinimumTLSVersionTlSv12 InputHTTPTLSSettingsServerSideMinimumTLSVersion = "TLSv1.2"
	InputHTTPTLSSettingsServerSideMinimumTLSVersionTlSv13 InputHTTPTLSSettingsServerSideMinimumTLSVersion = "TLSv1.3"
)

func (e InputHTTPTLSSettingsServerSideMinimumTLSVersion) ToPointer() *InputHTTPTLSSettingsServerSideMinimumTLSVersion {
	return &e
}

func (e *InputHTTPTLSSettingsServerSideMinimumTLSVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TLSv1":
		fallthrough
	case "TLSv1.1":
		fallthrough
	case "TLSv1.2":
		fallthrough
	case "TLSv1.3":
		*e = InputHTTPTLSSettingsServerSideMinimumTLSVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputHTTPTLSSettingsServerSideMinimumTLSVersion: %v", v)
	}
}

type InputHTTPTLSSettingsServerSide struct {
	// Path on server containing CA certificates to use. PEM format. Can reference $ENV_VARS.
	CaPath *string `json:"caPath,omitempty"`
	// Path on server containing certificates to use. PEM format. Can reference $ENV_VARS.
	CertPath *string `json:"certPath,omitempty"`
	// The name of the predefined certificate.
	CertificateName *string     `json:"certificateName,omitempty"`
	CommonNameRegex interface{} `json:"commonNameRegex,omitempty"`
	Disabled        *bool       `json:"disabled,omitempty"`
	// Maximum TLS version to accept from connections.
	MaxVersion *InputHTTPTLSSettingsServerSideMaximumTLSVersion `json:"maxVersion,omitempty"`
	// Minimum TLS version to accept from connections.
	MinVersion *InputHTTPTLSSettingsServerSideMinimumTLSVersion `json:"minVersion,omitempty"`
	// Passphrase to use to decrypt private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// Path on server containing the private key to use. PEM format. Can reference $ENV_VARS.
	PrivKeyPath        *string     `json:"privKeyPath,omitempty"`
	RejectUnauthorized interface{} `json:"rejectUnauthorized,omitempty"`
	// Whether to require clients to present their certificates. Used to perform client authentication using SSL certs.
	RequestCert *bool `json:"requestCert,omitempty"`
}

func (o *InputHTTPTLSSettingsServerSide) GetCaPath() *string {
	if o == nil {
		return nil
	}
	return o.CaPath
}

func (o *InputHTTPTLSSettingsServerSide) GetCertPath() *string {
	if o == nil {
		return nil
	}
	return o.CertPath
}

func (o *InputHTTPTLSSettingsServerSide) GetCertificateName() *string {
	if o == nil {
		return nil
	}
	return o.CertificateName
}

func (o *InputHTTPTLSSettingsServerSide) GetCommonNameRegex() interface{} {
	if o == nil {
		return nil
	}
	return o.CommonNameRegex
}

func (o *InputHTTPTLSSettingsServerSide) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputHTTPTLSSettingsServerSide) GetMaxVersion() *InputHTTPTLSSettingsServerSideMaximumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MaxVersion
}

func (o *InputHTTPTLSSettingsServerSide) GetMinVersion() *InputHTTPTLSSettingsServerSideMinimumTLSVersion {
	if o == nil {
		return nil
	}
	return o.MinVersion
}

func (o *InputHTTPTLSSettingsServerSide) GetPassphrase() *string {
	if o == nil {
		return nil
	}
	return o.Passphrase
}

func (o *InputHTTPTLSSettingsServerSide) GetPrivKeyPath() *string {
	if o == nil {
		return nil
	}
	return o.PrivKeyPath
}

func (o *InputHTTPTLSSettingsServerSide) GetRejectUnauthorized() interface{} {
	if o == nil {
		return nil
	}
	return o.RejectUnauthorized
}

func (o *InputHTTPTLSSettingsServerSide) GetRequestCert() *bool {
	if o == nil {
		return nil
	}
	return o.RequestCert
}

type InputHTTPType string

const (
	InputHTTPTypeHTTP InputHTTPType = "http"
)

func (e InputHTTPType) ToPointer() *InputHTTPType {
	return &e
}

func (e *InputHTTPType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = InputHTTPType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputHTTPType: %v", v)
	}
}

type InputHTTP struct {
	// How often request activity is logged at the `info` level. A value of 1 would log every request, 10 every 10th request, etc.
	ActivityLogSampleRate *int64 `json:"activityLogSampleRate,omitempty"`
	// Shared secrets to be provided by any client (Authorization: <token>). If empty, unauthed access is permitted.
	AuthTokens []string `json:"authTokens,omitempty"`
	// Toggle this to Yes to add request headers to events, in the __headers field.
	CaptureHeaders *bool `json:"captureHeaders,omitempty"`
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputHTTPConnections `json:"connections,omitempty"`
	// Absolute path on which to listen for the Cribl HTTP API requests. At the moment, only _bulk (default /cribl/_bulk) is available. Use empty string to disable.
	CriblAPI *string `json:"criblAPI,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Absolute path on which to listen for the Elasticsearch API requests. At the moment only _bulk (default /elastic/_bulk) is available. Use empty string to disable
	ElasticAPI *string `json:"elasticAPI,omitempty"`
	// Enable if the connection is proxied by a device that supports Proxy Protocol V1 or V2.
	EnableProxyHeader *bool `json:"enableProxyHeader,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Address to bind on. Defaults to 0.0.0.0 (all addresses).
	Host string `json:"host"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// After the last response is sent, @{product} will wait this long for additional data before closing the socket connection. Minimum 1 sec.; maximum 600 sec. (10 min.).
	KeepAliveTimeout *int64 `json:"keepAliveTimeout,omitempty"`
	// Maximum number of active requests per Worker Process. Use 0 for unlimited.
	MaxActiveReq *int64 `json:"maxActiveReq,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputHTTPMetadata `json:"metadata,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// Port to listen on.
	Port int64        `json:"port"`
	Pq   *InputHTTPPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// How long to wait for an incoming request to complete before aborting it. Use 0 to disable.
	RequestTimeout *int64 `json:"requestTimeout,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	// - true
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// How long @{product} should wait before assuming that an inactive socket has timed out. To wait forever, set to 0.
	SocketTimeout *int64 `json:"socketTimeout,omitempty"`
	// Absolute path on which listen for the Splunk HTTP Event Collector API requests. Use empty string to disable.
	SplunkHecAPI *string `json:"splunkHecAPI,omitempty"`
	// Whether to enable Splunk HEC acknowledgements
	SplunkHecAcks *bool `json:"splunkHecAcks,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string                        `json:"streamtags,omitempty"`
	TLS        *InputHTTPTLSSettingsServerSide `json:"tls,omitempty"`
	Type       *InputHTTPType                  `json:"type,omitempty"`
}

func (o *InputHTTP) GetActivityLogSampleRate() *int64 {
	if o == nil {
		return nil
	}
	return o.ActivityLogSampleRate
}

func (o *InputHTTP) GetAuthTokens() []string {
	if o == nil {
		return nil
	}
	return o.AuthTokens
}

func (o *InputHTTP) GetCaptureHeaders() *bool {
	if o == nil {
		return nil
	}
	return o.CaptureHeaders
}

func (o *InputHTTP) GetConnections() []InputHTTPConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputHTTP) GetCriblAPI() *string {
	if o == nil {
		return nil
	}
	return o.CriblAPI
}

func (o *InputHTTP) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputHTTP) GetElasticAPI() *string {
	if o == nil {
		return nil
	}
	return o.ElasticAPI
}

func (o *InputHTTP) GetEnableProxyHeader() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProxyHeader
}

func (o *InputHTTP) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputHTTP) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *InputHTTP) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputHTTP) GetKeepAliveTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.KeepAliveTimeout
}

func (o *InputHTTP) GetMaxActiveReq() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveReq
}

func (o *InputHTTP) GetMetadata() []InputHTTPMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputHTTP) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputHTTP) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *InputHTTP) GetPq() *InputHTTPPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputHTTP) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputHTTP) GetRequestTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.RequestTimeout
}

func (o *InputHTTP) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputHTTP) GetSocketTimeout() *int64 {
	if o == nil {
		return nil
	}
	return o.SocketTimeout
}

func (o *InputHTTP) GetSplunkHecAPI() *string {
	if o == nil {
		return nil
	}
	return o.SplunkHecAPI
}

func (o *InputHTTP) GetSplunkHecAcks() *bool {
	if o == nil {
		return nil
	}
	return o.SplunkHecAcks
}

func (o *InputHTTP) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputHTTP) GetTLS() *InputHTTPTLSSettingsServerSide {
	if o == nil {
		return nil
	}
	return o.TLS
}

func (o *InputHTTP) GetType() *InputHTTPType {
	if o == nil {
		return nil
	}
	return o.Type
}
