// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InputSnmpConnections struct {
	// Select a Destination.
	Output string `json:"output"`
	// Select Pipeline or Pack. Optional.
	Pipeline *string `json:"pipeline,omitempty"`
}

func (o *InputSnmpConnections) GetOutput() string {
	if o == nil {
		return ""
	}
	return o.Output
}

func (o *InputSnmpConnections) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

type InputSnmpMetadata struct {
	// Field name
	Name string `json:"name"`
	// JavaScript expression to compute field's value, enclosed in quotes or backticks. (Can evaluate to a constant.)
	Value string `json:"value"`
}

func (o *InputSnmpMetadata) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InputSnmpMetadata) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// InputSnmpPqCompression - Codec to use to compress the persisted data.
type InputSnmpPqCompression string

const (
	InputSnmpPqCompressionNone InputSnmpPqCompression = "none"
	InputSnmpPqCompressionGzip InputSnmpPqCompression = "gzip"
)

func (e InputSnmpPqCompression) ToPointer() *InputSnmpPqCompression {
	return &e
}

func (e *InputSnmpPqCompression) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "gzip":
		*e = InputSnmpPqCompression(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSnmpPqCompression: %v", v)
	}
}

// InputSnmpPqMode - With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
type InputSnmpPqMode string

const (
	InputSnmpPqModeSmart  InputSnmpPqMode = "smart"
	InputSnmpPqModeAlways InputSnmpPqMode = "always"
)

func (e InputSnmpPqMode) ToPointer() *InputSnmpPqMode {
	return &e
}

func (e *InputSnmpPqMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "smart":
		fallthrough
	case "always":
		*e = InputSnmpPqMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSnmpPqMode: %v", v)
	}
}

type InputSnmpPq struct {
	// The number of events to send downstream before committing that Stream has read them.
	CommitFrequency *int64 `json:"commitFrequency,omitempty"`
	// Codec to use to compress the persisted data.
	Compress *InputSnmpPqCompression `json:"compress,omitempty"`
	// The maximum number of events to hold in memory before writing the events to disk.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// The maximum size to store in each queue file before closing and optionally compressing (KB, MB, etc.).
	MaxFileSize *string `json:"maxFileSize,omitempty"`
	// The maximum amount of disk space the queue is allowed to consume. Once reached, the system stops queueing and applies the fallback Queue-full behavior. Enter a numeral with units of KB, MB, etc.
	MaxSize *string `json:"maxSize,omitempty"`
	// With Smart mode, PQ will write events to the filesystem only when it detects backpressure from the processing engine. With Always On mode, PQ will always write events directly to the queue before forwarding them to the processing engine.
	Mode *InputSnmpPqMode `json:"mode,omitempty"`
	// The location for the persistent queue files. To this field's value, the system will append: /<worker-id>/inputs/<input-id>.
	Path *string `json:"path,omitempty"`
}

func (o *InputSnmpPq) GetCommitFrequency() *int64 {
	if o == nil {
		return nil
	}
	return o.CommitFrequency
}

func (o *InputSnmpPq) GetCompress() *InputSnmpPqCompression {
	if o == nil {
		return nil
	}
	return o.Compress
}

func (o *InputSnmpPq) GetMaxBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSnmpPq) GetMaxFileSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxFileSize
}

func (o *InputSnmpPq) GetMaxSize() *string {
	if o == nil {
		return nil
	}
	return o.MaxSize
}

func (o *InputSnmpPq) GetMode() *InputSnmpPqMode {
	if o == nil {
		return nil
	}
	return o.Mode
}

func (o *InputSnmpPq) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

type InputSnmpType string

const (
	InputSnmpTypeSnmp InputSnmpType = "snmp"
)

func (e InputSnmpType) ToPointer() *InputSnmpType {
	return &e
}

func (e *InputSnmpType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "snmp":
		*e = InputSnmpType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InputSnmpType: %v", v)
	}
}

type InputSnmp struct {
	// Direct connections to Destinations, optionally via a Pipeline or a Pack.
	Connections []InputSnmpConnections `json:"connections,omitempty"`
	// Enable/disable this input
	Disabled *bool `json:"disabled,omitempty"`
	// Optionally, enable this config only on a specified Git branch. If empty, will be enabled everywhere.
	Environment *string `json:"environment,omitempty"`
	// Address to bind on. For IPv4 (all addresses), use the default '0.0.0.0'. For IPv6, enter '::' (all addresses) or specify an IP address.
	Host string `json:"host"`
	// Unique ID for this input
	ID *string `json:"id,omitempty"`
	// Regex matching IP addresses that are allowed to send data
	IPWhitelistRegex *string `json:"ipWhitelistRegex,omitempty"`
	// Maximum number of events to buffer when downstream is blocking.
	MaxBufferSize *int64 `json:"maxBufferSize,omitempty"`
	// Fields to add to events from this input.
	Metadata []InputSnmpMetadata `json:"metadata,omitempty"`
	// Pipeline to process data from this Source before sending it through the Routes.
	Pipeline *string `json:"pipeline,omitempty"`
	// UDP port to receive SNMP traps on. Defaults to 162.
	Port int64        `json:"port"`
	Pq   *InputSnmpPq `json:"pq,omitempty"`
	// For details on Persistent Queues, see: [https://docs.cribl.io/stream/persistent-queues](https://docs.cribl.io/stream/persistent-queues)
	PqEnabled *bool `json:"pqEnabled,omitempty"`
	// Select whether to send data to Routes, or directly to Destinations.
	SendToRoutes *bool `json:"sendToRoutes,omitempty"`
	// Add tags for filtering and grouping in @{product}.
	Streamtags []string       `json:"streamtags,omitempty"`
	Type       *InputSnmpType `json:"type,omitempty"`
}

func (o *InputSnmp) GetConnections() []InputSnmpConnections {
	if o == nil {
		return nil
	}
	return o.Connections
}

func (o *InputSnmp) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *InputSnmp) GetEnvironment() *string {
	if o == nil {
		return nil
	}
	return o.Environment
}

func (o *InputSnmp) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *InputSnmp) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *InputSnmp) GetIPWhitelistRegex() *string {
	if o == nil {
		return nil
	}
	return o.IPWhitelistRegex
}

func (o *InputSnmp) GetMaxBufferSize() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxBufferSize
}

func (o *InputSnmp) GetMetadata() []InputSnmpMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *InputSnmp) GetPipeline() *string {
	if o == nil {
		return nil
	}
	return o.Pipeline
}

func (o *InputSnmp) GetPort() int64 {
	if o == nil {
		return 0
	}
	return o.Port
}

func (o *InputSnmp) GetPq() *InputSnmpPq {
	if o == nil {
		return nil
	}
	return o.Pq
}

func (o *InputSnmp) GetPqEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PqEnabled
}

func (o *InputSnmp) GetSendToRoutes() *bool {
	if o == nil {
		return nil
	}
	return o.SendToRoutes
}

func (o *InputSnmp) GetStreamtags() []string {
	if o == nil {
		return nil
	}
	return o.Streamtags
}

func (o *InputSnmp) GetType() *InputSnmpType {
	if o == nil {
		return nil
	}
	return o.Type
}
