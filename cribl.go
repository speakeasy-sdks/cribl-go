// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package cribl

import (
	"cribl/pkg/models/shared"
	"cribl/pkg/utils"
	"fmt"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://logstream.{organizationID}.cribl.cloud/",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

type sdkConfiguration struct {
	DefaultClient     HTTPClient
	SecurityClient    HTTPClient
	Security          *shared.Security
	ServerURL         string
	ServerIndex       int
	ServerDefaults    []map[string]string
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], c.ServerDefaults[c.ServerIndex]
}

// Cribl - Cribl API Reference: This API Reference lists available REST endpoints, along with their supported operations for accessing, creating, updating, or deleting resources. See our complementary product documentation at [docs.cribl.io](http://docs.cribl.io).
type Cribl struct {
	AppscopeLibEntries         *appscopeLibEntries
	AppscopeLibEntry           *appscopeLibEntry
	AuthToken                  *authToken
	AuthenticationSettings     *authenticationSettings
	Authorizations             *authorizations
	Branches                   *branches
	BulletinMessage            *bulletinMessage
	BulletinMessages           *bulletinMessages
	Bytes                      *bytes
	CancelRunningGroup         *cancelRunningGroup
	Certificate                *certificate
	Certificates               *certificates
	ChangedFiles               *changedFiles
	ChangelogViewState         *changelogViewState
	Changelogs                 *changelogs
	ClientRoles                *clientRoles
	Cluis                      *cluis
	Collector                  *collector
	CollectorObject            *collectorObject
	Commit                     *commit
	Condition                  *condition
	Conditions                 *conditions
	ConfigGroup                *configGroup
	ConfiguredCollectors       *configuredCollectors
	Container                  *container
	CountFile                  *countFile
	CreatePipeline             *createPipeline
	CriblMetadata              *criblMetadata
	CriblSystemSettings        *criblSystemSettings
	CriblsSettings             *criblsSettings
	CurrentConfig              *currentConfig
	DataSample                 *dataSample
	DataSampleID               *dataSampleID
	DatabaseConnection         *databaseConnection
	DatabaseConnectionConfigID *databaseConnectionConfigID
	Dataset                    *dataset
	DatasetObject              *datasetObject
	DatasetObjects             *datasetObjects
	Datasets                   *datasets
	DestinationQueue           *destinationQueue
	DiagBundle                 *diagBundle
	DiagBundles                *diagBundles
	DistributedDeployment      *distributedDeployment
	EdgeHostFiles              *edgeHostFiles
	EdgeListing                *edgeListing
	EventBreaker               *eventBreaker
	EventBreakerID             *eventBreakerID
	EventBreakerOnData         *eventBreakerOnData
	Events                     *events
	ExecuteDistributedUpgrade  *executeDistributedUpgrade
	ExecutorID                 *executorID
	ExecutorObject             *executorObject
	ExistingDiagBundles        *existingDiagBundles
	Feature                    *feature
	Features                   *features
	FieldSummaries             *fieldSummaries
	FleetMapping               *fleetMapping
	FleetMappings              *fleetMappings
	FleetOrWorkerGroup         *fleetOrWorkerGroup
	FunctionID                 *functionID
	GitSettings                *gitSettings
	GiveCriblVersion           *giveCriblVersion
	GlobalVariable             *globalVariable
	GlobalVariableID           *globalVariableID
	GrokFile                   *grokFile
	GrokFiles                  *grokFiles
	GroupBundle                *groupBundle
	Groups                     *groups
	HealthInfo                 *healthInfo
	HostMetadataStructure      *hostMetadataStructure
	IDPAuth                    *idpAuth
	IDPUserAuth                *idpUserAuth
	InputID                    *inputID
	InputObject                *inputObject
	InputStatus                *inputStatus
	InputStatusID              *inputStatusID
	InternalSystemMetrics      *internalSystemMetrics
	JavascriptExpression       *javascriptExpression
	Job                        *job
	JobInfos                   *jobInfos
	JobResult                  *jobResult
	JobResults                 *jobResults
	JobStatus                  *jobStatus
	KMSConfig                  *kmsConfig
	KMSHealth                  *kmsHealth
	KeyMetadataEntities        *keyMetadataEntities
	KeyMetadataEntity          *keyMetadataEntity
	LatestPQ                   *latestPQ
	License                    *license
	LicenseUsageMetrics        *licenseUsageMetrics
	Licenses                   *licenses
	ListAuthGroup              *listAuthGroup
	ListContainerDetail        *listContainerDetail
	ListCriblVersion           *listCriblVersion
	ListDataSample             *listDataSample
	ListDatabaseConnection     *listDatabaseConnection
	ListEventBreaker           *listEventBreaker
	ListGlobalVariable         *listGlobalVariable
	ListParser                 *listParser
	ListProcessRunningDetail   *listProcessRunningDetail
	ListSchema                 *listSchema
	LiveData                   *liveData
	LogFileContent             *logFileContent
	LogFileContents            *logFileContents
	LogFileList                *logFileList
	LogFiles                   *logFiles
	LogFilesContent            *logFilesContent
	LogandTextual              *logandTextual
	LoggerConfig               *loggerConfig
	LoggerConfigs              *loggerConfigs
	Lookup                     *lookup
	Lookups                    *lookups
	MappingRuleset             *mappingRuleset
	MappingRulesetID           *mappingRulesetID
	MappingRulesets            *mappingRulesets
	MasterNodePackage          *masterNodePackage
	Metrics                    *metrics
	NotificationTarget         *notificationTarget
	NotificationTargets        *notificationTargets
	ObjectFunction             *objectFunction
	OutputID                   *outputID
	OutputObject               *outputObject
	OutputObjects              *outputObjects
	OutputStatus               *outputStatus
	OutputStatusID             *outputStatusID
	Pack                       *pack
	Packs                      *packs
	ParserID                   *parserID
	ParserObject               *parserObject
	PipelineID                 *pipelineID
	PipelineObject             *pipelineObject
	PolicyRule                 *policyRule
	PolicyRules                *policyRules
	PreviousCriblPackage       *previousCriblPackage
	ProcessRunningDetail       *processRunningDetail
	Processes                  *processes
	Profiler                   *profiler
	Profilers                  *profilers
	QuerySnippet               *querySnippet
	RedirectInfo               *redirectInfo
	RedirectUserAuth           *redirectUserAuth
	RegexLibEntry              *regexLibEntry
	RegexLibEntryID            *regexLibEntryID
	RegexLibEntryObject        *regexLibEntryObject
	ReloadCriblSettings        *reloadCriblSettings
	RemoteRepo                 *remoteRepo
	RequestAuth                *requestAuth
	RequestUserAuth            *requestUserAuth
	RestSecret                 *restSecret
	RestSecrets                *restSecrets
	RestartCriblSettings       *restartCriblSettings
	Role                       *role
	Roles                      *roles
	RouteListID                *routeListID
	RouteLists                 *routeLists
	RouteObject                *routeObject
	SampleContent              *sampleContent
	SampleEvents               *sampleEvents
	SampleOutput               *sampleOutput
	SavedJob                   *savedJob
	SavedJobs                  *savedJobs
	SavedQueries               *savedQueries
	SavedQuery                 *savedQuery
	Schema                     *schema
	SchemaID                   *schemaID
	Schemas                    *schemas
	Script                     *script
	Scripts                    *scripts
	Search                     *search
	SearchDoc                  *searchDoc
	SearchJob                  *searchJob
	SearchJobMetrics           *searchJobMetrics
	SearchJobs                 *searchJobs
	SearchLimits               *searchLimits
	SearchLogs                 *searchLogs
	SearchTimeline             *searchTimeline
	SpecifiedOutput            *specifiedOutput
	StageDistributedPackage    *stageDistributedPackage
	SystemInfo                 *systemInfo
	TaskError                  *taskError
	TaskErrors                 *taskErrors
	TestDatabaseConnection     *testDatabaseConnection
	TextualDiff                *textualDiff
	TokenMetadata              *tokenMetadata
	TrustPolicies              *trustPolicies
	UIState                    *uiState
	User                       *user
	UserAuth                   *userAuth
	UserID                     *userID
	UserObject                 *userObject
	UserProperties             *userProperties
	Versioning                 *versioning
	WorkerEdgeNodes            *workerEdgeNodes
	WorkerEdgeNodesCount       *workerEdgeNodesCount
	WorkingTree                *workingTree

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*Cribl)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Cribl) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Cribl) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Cribl) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithOrganizationID allows setting the $name variable for url substitution
func WithOrganizationID(organizationID string) SDKOption {
	return func(sdk *Cribl) {
		for idx := range sdk.sdkConfiguration.ServerDefaults {
			if _, ok := sdk.sdkConfiguration.ServerDefaults[idx]["organizationID"]; !ok {
				continue
			}

			sdk.sdkConfiguration.ServerDefaults[idx]["organizationID"] = fmt.Sprintf("%v", organizationID)
		}
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Cribl) {
		sdk.sdkConfiguration.DefaultClient = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security shared.Security) SDKOption {
	return func(sdk *Cribl) {
		sdk.sdkConfiguration.Security = &security
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Cribl {
	sdk := &Cribl{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "1.0.0",
			SDKVersion:        "1.0.0",
			GenVersion:        "2.73.0",
			ServerDefaults: []map[string]string{
				{
					"organizationID": "api",
				},
			},
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.DefaultClient == nil {
		sdk.sdkConfiguration.DefaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk.sdkConfiguration.SecurityClient == nil {
		if sdk.sdkConfiguration.Security != nil {
			sdk.sdkConfiguration.SecurityClient = utils.ConfigureSecurityClient(sdk.sdkConfiguration.DefaultClient, sdk.sdkConfiguration.Security)
		} else {
			sdk.sdkConfiguration.SecurityClient = sdk.sdkConfiguration.DefaultClient
		}
	}

	sdk.AppscopeLibEntries = newAppscopeLibEntries(sdk.sdkConfiguration)

	sdk.AppscopeLibEntry = newAppscopeLibEntry(sdk.sdkConfiguration)

	sdk.AuthToken = newAuthToken(sdk.sdkConfiguration)

	sdk.AuthenticationSettings = newAuthenticationSettings(sdk.sdkConfiguration)

	sdk.Authorizations = newAuthorizations(sdk.sdkConfiguration)

	sdk.Branches = newBranches(sdk.sdkConfiguration)

	sdk.BulletinMessage = newBulletinMessage(sdk.sdkConfiguration)

	sdk.BulletinMessages = newBulletinMessages(sdk.sdkConfiguration)

	sdk.Bytes = newBytes(sdk.sdkConfiguration)

	sdk.CancelRunningGroup = newCancelRunningGroup(sdk.sdkConfiguration)

	sdk.Certificate = newCertificate(sdk.sdkConfiguration)

	sdk.Certificates = newCertificates(sdk.sdkConfiguration)

	sdk.ChangedFiles = newChangedFiles(sdk.sdkConfiguration)

	sdk.ChangelogViewState = newChangelogViewState(sdk.sdkConfiguration)

	sdk.Changelogs = newChangelogs(sdk.sdkConfiguration)

	sdk.ClientRoles = newClientRoles(sdk.sdkConfiguration)

	sdk.Cluis = newCluis(sdk.sdkConfiguration)

	sdk.Collector = newCollector(sdk.sdkConfiguration)

	sdk.CollectorObject = newCollectorObject(sdk.sdkConfiguration)

	sdk.Commit = newCommit(sdk.sdkConfiguration)

	sdk.Condition = newCondition(sdk.sdkConfiguration)

	sdk.Conditions = newConditions(sdk.sdkConfiguration)

	sdk.ConfigGroup = newConfigGroup(sdk.sdkConfiguration)

	sdk.ConfiguredCollectors = newConfiguredCollectors(sdk.sdkConfiguration)

	sdk.Container = newContainer(sdk.sdkConfiguration)

	sdk.CountFile = newCountFile(sdk.sdkConfiguration)

	sdk.CreatePipeline = newCreatePipeline(sdk.sdkConfiguration)

	sdk.CriblMetadata = newCriblMetadata(sdk.sdkConfiguration)

	sdk.CriblSystemSettings = newCriblSystemSettings(sdk.sdkConfiguration)

	sdk.CriblsSettings = newCriblsSettings(sdk.sdkConfiguration)

	sdk.CurrentConfig = newCurrentConfig(sdk.sdkConfiguration)

	sdk.DataSample = newDataSample(sdk.sdkConfiguration)

	sdk.DataSampleID = newDataSampleID(sdk.sdkConfiguration)

	sdk.DatabaseConnection = newDatabaseConnection(sdk.sdkConfiguration)

	sdk.DatabaseConnectionConfigID = newDatabaseConnectionConfigID(sdk.sdkConfiguration)

	sdk.Dataset = newDataset(sdk.sdkConfiguration)

	sdk.DatasetObject = newDatasetObject(sdk.sdkConfiguration)

	sdk.DatasetObjects = newDatasetObjects(sdk.sdkConfiguration)

	sdk.Datasets = newDatasets(sdk.sdkConfiguration)

	sdk.DestinationQueue = newDestinationQueue(sdk.sdkConfiguration)

	sdk.DiagBundle = newDiagBundle(sdk.sdkConfiguration)

	sdk.DiagBundles = newDiagBundles(sdk.sdkConfiguration)

	sdk.DistributedDeployment = newDistributedDeployment(sdk.sdkConfiguration)

	sdk.EdgeHostFiles = newEdgeHostFiles(sdk.sdkConfiguration)

	sdk.EdgeListing = newEdgeListing(sdk.sdkConfiguration)

	sdk.EventBreaker = newEventBreaker(sdk.sdkConfiguration)

	sdk.EventBreakerID = newEventBreakerID(sdk.sdkConfiguration)

	sdk.EventBreakerOnData = newEventBreakerOnData(sdk.sdkConfiguration)

	sdk.Events = newEvents(sdk.sdkConfiguration)

	sdk.ExecuteDistributedUpgrade = newExecuteDistributedUpgrade(sdk.sdkConfiguration)

	sdk.ExecutorID = newExecutorID(sdk.sdkConfiguration)

	sdk.ExecutorObject = newExecutorObject(sdk.sdkConfiguration)

	sdk.ExistingDiagBundles = newExistingDiagBundles(sdk.sdkConfiguration)

	sdk.Feature = newFeature(sdk.sdkConfiguration)

	sdk.Features = newFeatures(sdk.sdkConfiguration)

	sdk.FieldSummaries = newFieldSummaries(sdk.sdkConfiguration)

	sdk.FleetMapping = newFleetMapping(sdk.sdkConfiguration)

	sdk.FleetMappings = newFleetMappings(sdk.sdkConfiguration)

	sdk.FleetOrWorkerGroup = newFleetOrWorkerGroup(sdk.sdkConfiguration)

	sdk.FunctionID = newFunctionID(sdk.sdkConfiguration)

	sdk.GitSettings = newGitSettings(sdk.sdkConfiguration)

	sdk.GiveCriblVersion = newGiveCriblVersion(sdk.sdkConfiguration)

	sdk.GlobalVariable = newGlobalVariable(sdk.sdkConfiguration)

	sdk.GlobalVariableID = newGlobalVariableID(sdk.sdkConfiguration)

	sdk.GrokFile = newGrokFile(sdk.sdkConfiguration)

	sdk.GrokFiles = newGrokFiles(sdk.sdkConfiguration)

	sdk.GroupBundle = newGroupBundle(sdk.sdkConfiguration)

	sdk.Groups = newGroups(sdk.sdkConfiguration)

	sdk.HealthInfo = newHealthInfo(sdk.sdkConfiguration)

	sdk.HostMetadataStructure = newHostMetadataStructure(sdk.sdkConfiguration)

	sdk.IDPAuth = newIDPAuth(sdk.sdkConfiguration)

	sdk.IDPUserAuth = newIDPUserAuth(sdk.sdkConfiguration)

	sdk.InputID = newInputID(sdk.sdkConfiguration)

	sdk.InputObject = newInputObject(sdk.sdkConfiguration)

	sdk.InputStatus = newInputStatus(sdk.sdkConfiguration)

	sdk.InputStatusID = newInputStatusID(sdk.sdkConfiguration)

	sdk.InternalSystemMetrics = newInternalSystemMetrics(sdk.sdkConfiguration)

	sdk.JavascriptExpression = newJavascriptExpression(sdk.sdkConfiguration)

	sdk.Job = newJob(sdk.sdkConfiguration)

	sdk.JobInfos = newJobInfos(sdk.sdkConfiguration)

	sdk.JobResult = newJobResult(sdk.sdkConfiguration)

	sdk.JobResults = newJobResults(sdk.sdkConfiguration)

	sdk.JobStatus = newJobStatus(sdk.sdkConfiguration)

	sdk.KMSConfig = newKMSConfig(sdk.sdkConfiguration)

	sdk.KMSHealth = newKMSHealth(sdk.sdkConfiguration)

	sdk.KeyMetadataEntities = newKeyMetadataEntities(sdk.sdkConfiguration)

	sdk.KeyMetadataEntity = newKeyMetadataEntity(sdk.sdkConfiguration)

	sdk.LatestPQ = newLatestPQ(sdk.sdkConfiguration)

	sdk.License = newLicense(sdk.sdkConfiguration)

	sdk.LicenseUsageMetrics = newLicenseUsageMetrics(sdk.sdkConfiguration)

	sdk.Licenses = newLicenses(sdk.sdkConfiguration)

	sdk.ListAuthGroup = newListAuthGroup(sdk.sdkConfiguration)

	sdk.ListContainerDetail = newListContainerDetail(sdk.sdkConfiguration)

	sdk.ListCriblVersion = newListCriblVersion(sdk.sdkConfiguration)

	sdk.ListDataSample = newListDataSample(sdk.sdkConfiguration)

	sdk.ListDatabaseConnection = newListDatabaseConnection(sdk.sdkConfiguration)

	sdk.ListEventBreaker = newListEventBreaker(sdk.sdkConfiguration)

	sdk.ListGlobalVariable = newListGlobalVariable(sdk.sdkConfiguration)

	sdk.ListParser = newListParser(sdk.sdkConfiguration)

	sdk.ListProcessRunningDetail = newListProcessRunningDetail(sdk.sdkConfiguration)

	sdk.ListSchema = newListSchema(sdk.sdkConfiguration)

	sdk.LiveData = newLiveData(sdk.sdkConfiguration)

	sdk.LogFileContent = newLogFileContent(sdk.sdkConfiguration)

	sdk.LogFileContents = newLogFileContents(sdk.sdkConfiguration)

	sdk.LogFileList = newLogFileList(sdk.sdkConfiguration)

	sdk.LogFiles = newLogFiles(sdk.sdkConfiguration)

	sdk.LogFilesContent = newLogFilesContent(sdk.sdkConfiguration)

	sdk.LogandTextual = newLogandTextual(sdk.sdkConfiguration)

	sdk.LoggerConfig = newLoggerConfig(sdk.sdkConfiguration)

	sdk.LoggerConfigs = newLoggerConfigs(sdk.sdkConfiguration)

	sdk.Lookup = newLookup(sdk.sdkConfiguration)

	sdk.Lookups = newLookups(sdk.sdkConfiguration)

	sdk.MappingRuleset = newMappingRuleset(sdk.sdkConfiguration)

	sdk.MappingRulesetID = newMappingRulesetID(sdk.sdkConfiguration)

	sdk.MappingRulesets = newMappingRulesets(sdk.sdkConfiguration)

	sdk.MasterNodePackage = newMasterNodePackage(sdk.sdkConfiguration)

	sdk.Metrics = newMetrics(sdk.sdkConfiguration)

	sdk.NotificationTarget = newNotificationTarget(sdk.sdkConfiguration)

	sdk.NotificationTargets = newNotificationTargets(sdk.sdkConfiguration)

	sdk.ObjectFunction = newObjectFunction(sdk.sdkConfiguration)

	sdk.OutputID = newOutputID(sdk.sdkConfiguration)

	sdk.OutputObject = newOutputObject(sdk.sdkConfiguration)

	sdk.OutputObjects = newOutputObjects(sdk.sdkConfiguration)

	sdk.OutputStatus = newOutputStatus(sdk.sdkConfiguration)

	sdk.OutputStatusID = newOutputStatusID(sdk.sdkConfiguration)

	sdk.Pack = newPack(sdk.sdkConfiguration)

	sdk.Packs = newPacks(sdk.sdkConfiguration)

	sdk.ParserID = newParserID(sdk.sdkConfiguration)

	sdk.ParserObject = newParserObject(sdk.sdkConfiguration)

	sdk.PipelineID = newPipelineID(sdk.sdkConfiguration)

	sdk.PipelineObject = newPipelineObject(sdk.sdkConfiguration)

	sdk.PolicyRule = newPolicyRule(sdk.sdkConfiguration)

	sdk.PolicyRules = newPolicyRules(sdk.sdkConfiguration)

	sdk.PreviousCriblPackage = newPreviousCriblPackage(sdk.sdkConfiguration)

	sdk.ProcessRunningDetail = newProcessRunningDetail(sdk.sdkConfiguration)

	sdk.Processes = newProcesses(sdk.sdkConfiguration)

	sdk.Profiler = newProfiler(sdk.sdkConfiguration)

	sdk.Profilers = newProfilers(sdk.sdkConfiguration)

	sdk.QuerySnippet = newQuerySnippet(sdk.sdkConfiguration)

	sdk.RedirectInfo = newRedirectInfo(sdk.sdkConfiguration)

	sdk.RedirectUserAuth = newRedirectUserAuth(sdk.sdkConfiguration)

	sdk.RegexLibEntry = newRegexLibEntry(sdk.sdkConfiguration)

	sdk.RegexLibEntryID = newRegexLibEntryID(sdk.sdkConfiguration)

	sdk.RegexLibEntryObject = newRegexLibEntryObject(sdk.sdkConfiguration)

	sdk.ReloadCriblSettings = newReloadCriblSettings(sdk.sdkConfiguration)

	sdk.RemoteRepo = newRemoteRepo(sdk.sdkConfiguration)

	sdk.RequestAuth = newRequestAuth(sdk.sdkConfiguration)

	sdk.RequestUserAuth = newRequestUserAuth(sdk.sdkConfiguration)

	sdk.RestSecret = newRestSecret(sdk.sdkConfiguration)

	sdk.RestSecrets = newRestSecrets(sdk.sdkConfiguration)

	sdk.RestartCriblSettings = newRestartCriblSettings(sdk.sdkConfiguration)

	sdk.Role = newRole(sdk.sdkConfiguration)

	sdk.Roles = newRoles(sdk.sdkConfiguration)

	sdk.RouteListID = newRouteListID(sdk.sdkConfiguration)

	sdk.RouteLists = newRouteLists(sdk.sdkConfiguration)

	sdk.RouteObject = newRouteObject(sdk.sdkConfiguration)

	sdk.SampleContent = newSampleContent(sdk.sdkConfiguration)

	sdk.SampleEvents = newSampleEvents(sdk.sdkConfiguration)

	sdk.SampleOutput = newSampleOutput(sdk.sdkConfiguration)

	sdk.SavedJob = newSavedJob(sdk.sdkConfiguration)

	sdk.SavedJobs = newSavedJobs(sdk.sdkConfiguration)

	sdk.SavedQueries = newSavedQueries(sdk.sdkConfiguration)

	sdk.SavedQuery = newSavedQuery(sdk.sdkConfiguration)

	sdk.Schema = newSchema(sdk.sdkConfiguration)

	sdk.SchemaID = newSchemaID(sdk.sdkConfiguration)

	sdk.Schemas = newSchemas(sdk.sdkConfiguration)

	sdk.Script = newScript(sdk.sdkConfiguration)

	sdk.Scripts = newScripts(sdk.sdkConfiguration)

	sdk.Search = newSearch(sdk.sdkConfiguration)

	sdk.SearchDoc = newSearchDoc(sdk.sdkConfiguration)

	sdk.SearchJob = newSearchJob(sdk.sdkConfiguration)

	sdk.SearchJobMetrics = newSearchJobMetrics(sdk.sdkConfiguration)

	sdk.SearchJobs = newSearchJobs(sdk.sdkConfiguration)

	sdk.SearchLimits = newSearchLimits(sdk.sdkConfiguration)

	sdk.SearchLogs = newSearchLogs(sdk.sdkConfiguration)

	sdk.SearchTimeline = newSearchTimeline(sdk.sdkConfiguration)

	sdk.SpecifiedOutput = newSpecifiedOutput(sdk.sdkConfiguration)

	sdk.StageDistributedPackage = newStageDistributedPackage(sdk.sdkConfiguration)

	sdk.SystemInfo = newSystemInfo(sdk.sdkConfiguration)

	sdk.TaskError = newTaskError(sdk.sdkConfiguration)

	sdk.TaskErrors = newTaskErrors(sdk.sdkConfiguration)

	sdk.TestDatabaseConnection = newTestDatabaseConnection(sdk.sdkConfiguration)

	sdk.TextualDiff = newTextualDiff(sdk.sdkConfiguration)

	sdk.TokenMetadata = newTokenMetadata(sdk.sdkConfiguration)

	sdk.TrustPolicies = newTrustPolicies(sdk.sdkConfiguration)

	sdk.UIState = newUIState(sdk.sdkConfiguration)

	sdk.User = newUser(sdk.sdkConfiguration)

	sdk.UserAuth = newUserAuth(sdk.sdkConfiguration)

	sdk.UserID = newUserID(sdk.sdkConfiguration)

	sdk.UserObject = newUserObject(sdk.sdkConfiguration)

	sdk.UserProperties = newUserProperties(sdk.sdkConfiguration)

	sdk.Versioning = newVersioning(sdk.sdkConfiguration)

	sdk.WorkerEdgeNodes = newWorkerEdgeNodes(sdk.sdkConfiguration)

	sdk.WorkerEdgeNodesCount = newWorkerEdgeNodesCount(sdk.sdkConfiguration)

	sdk.WorkingTree = newWorkingTree(sdk.sdkConfiguration)

	return sdk
}
